@page "/calculo"
@* @inject HttpClient Http *@
@using System.Text.Json
@using System.Text.Json.Serialization
@using FluentResults
@using System.Globalization
@using global::Dieta.Core.Interfaces
@inject IHttpClientFactory ClientFactory
@inject IFoodRepository alimentosService


@using static System.Net.Http.HttpClient
@using static System.Net.WebRequestMethods
@using NPOI.SS.UserModel;
@using NPOI.HSSF.UserModel;
@using Dieta.Core.Interfaces.Repository;

<h3>DietaNovo</h3>


<ul>
    @if (alimentosLista != null)
    {

        <RadzenDataGrid Data="@alimentosLista" TItem="Food" AllowFiltering="true" AllowPaging="true"
                        PageSize="10"
                        SelectionMode="DataGridSelectionMode.Single"
                          @bind-Value=@alimentoSelecionado
                        RowDoubleClick=@(args => AddFood(alimentoSelecionado[0],100,1))
         RowSelect="@(args=> linhaSelecionada=args)"> 
            <EmptyTemplate>
                <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">Alimento não encontrado</p>
            </EmptyTemplate>
            <Columns>
                <RadzenDataGridColumn TItem="Food" Property="FoodName" Title="Alimento" Width="20px" />
                <RadzenDataGridColumn TItem="Food" Property="Carb" Title="Carboidrato" Width="8px">
                </RadzenDataGridColumn>
               @*  <RadzenDataGridColumn TItem="Alimentos" Property="Preparo" Title="Modo de Preparo" Width="8px" /> *@
                <RadzenDataGridColumn TItem="Food" Property="Protein" Title="Proteina" Width="8px">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Food" Property="Fat" Title="Gordura" Width="8px" />
                <RadzenDataGridColumn TItem="Food" Property="Kcal" Title="Kcal" Width="8px" />
                <RadzenDataGridColumn TItem="Food" Property="Fiber" Title="Fibra" Width="8px" />

            </Columns>
        </RadzenDataGrid>


    }
    @if(alimentoSelecionado?.Any() == true)
    {
        <RadzenCard>
            <div style="display: inline-block;">
                <RadzenLabel>
                    <h4>Quantidade em gramas:</h4>
                </RadzenLabel>
            </div>
            <div style="display: inline-block;">


                <RadzenTextBox Change=@(args => @quantidade  = ConverteQuantidade(args.ToString())  ) class="w-100" />
            </div>

            <div style="display: inline-block;">
                <RadzenButton Click=@(args => alimentosService.AddFoodAsync(alimentoSelecionado[0],100,1)) Text="Adcionar" Icon="add_circle_outline" ButtonStyle="ButtonStyle.Secondary" />
            </div>
            <style>
                .elemento {
                    margin-left: 50px;
                }

            </style>
            <div style="display: inline-block;" class="elemento">
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Ex: 100,5</RadzenText>
            </div>
        </RadzenCard>
    }
    
    @if(alimentosBancoDeDados != null)
    {
        <RadzenDataGrid Data="@alimentosBancoDeDados" TItem="Food" AllowFiltering="true" AllowPaging="true"
                        PageSize="10"
                        SelectionMode="DataGridSelectionMode.Single"
                        @bind-Value=@alimentoSelecionadoDoBancodeDados>
                     @*    RowDoubleClick=@(args => alimentosService.AddAlimento(alimentoSelecionado[0],100,1))
                        RowSelect="@(args=> linhaSelecionada=args)"> *@
            <EmptyTemplate>
                <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">Alimento não encontrado</p>
            </EmptyTemplate>
            <Columns>
                <RadzenDataGridColumn TItem="Food" Property="Alimento" Title="Alimento" Width="20px" />
                <RadzenDataGridColumn TItem="Food" Property="Quantidade" Title="Quantidade" Width="8px" />
                <RadzenDataGridColumn TItem="Food" Property="Carboidrato" Title="Carboidrato" Width="8px">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Food" Property="Proteina" Title="Proteina" Width="8px">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Food" Property="Lipidio" Title="Gordura" Width="8px" />
                <RadzenDataGridColumn TItem="Food" Property="Kcal" Title="Kcal" Width="8px" />

            </Columns>
        </RadzenDataGrid>
    }
    
</ul>

@code {
    double quantidade;
    IList<Food> selectedEmployees;
    private IList<Food> alimentoSelecionado;
    private IList<Food> alimentoSelecionadoDoBancodeDados;
    private IEnumerable<Food>? alimentosLista;

    private IEnumerable<Food> alimentosBancoDeDados;
    Food linhaSelecionada = new Food();

    private bool getBranchesError;
    private bool shouldRender;

    protected override async Task OnInitializedAsync()
    {

         // List<Food> listaAlimentos = await StartListFood();
         // Result result = await alimentosService.CreateListFoodAsync(listaAlimentos);


        alimentosLista = await alimentosService.GetAllAsync();
        alimentosBancoDeDados = await alimentosService.GetAllSavedAsync();

    }

    // public async void LoadData()
    // {

        
    // }

    private double ConverteQuantidade(string qtd)
    {

        try
        {

            quantidade = double.Parse(qtd);
            if (quantidade == 0)
            {
                return 100;
            }
            return quantidade;
        }

        catch
        {

            //mensagemErro = true;


            quantidade = 37214982;
            return quantidade;

        }
    }
    private async void AddFood(Food food, double amount, int ordenation)
    {
        await alimentosService.AddFoodAsync(food, amount, ordenation);
        alimentosBancoDeDados = await alimentosService.GetAllSavedAsync();
        await InvokeAsync(StateHasChanged);
    }




    private List<Pedido> pedidos = new List<Pedido>()
    {
        // ... (seu código existente)
    };

    private List<Food> cardapio = new List<Food>();

    //public List<Alimentos> Cardapio => cardapio;

    string filePath = @"C:\Users\joaop\Downloads\tab01.xls";
    public async Task<List<Food>> StartListFood()
    {
        try
        {


            await using (FileStream fs = new FileStream(filePath, FileMode.Open, FileAccess.Read))
            {
                IWorkbook workbook = null;

                if (filePath.EndsWith(".xls"))
                    workbook = new HSSFWorkbook(fs);

                ISheet sheet = workbook?.GetSheetAt(0);

                if (sheet != null)
                {
                    int rowQtde = 1994;

                    for (int q = 5; q < rowQtde; q++)
                    {
                        IRow curRow = sheet.GetRow(q);

                        if (curRow != null && curRow.GetCell(1)?.StringCellValue != "")
                        {
                            string carbo = AlteraString(curRow.GetCell(7).ToString() ?? string.Empty);
                            string kcal = AlteraString(curRow.GetCell(4)?.ToString() ?? string.Empty);
                            string proteina = AlteraString(curRow.GetCell(5)?.ToString() ?? string.Empty);
                            string lipidio = AlteraString(curRow.GetCell(6)?.ToString() ?? string.Empty);
                            string fibra = AlteraString(curRow.GetCell(8)?.ToString() ?? string.Empty);

                            string preparo = curRow.GetCell(3)?.StringCellValue ?? string.Empty;
                            if (preparo == "Não se aplica")
                            {
                                preparo = "";
                            }
                            Food alimento = new Food()
                                {

                                    //Alimento = curRow.GetCell(1)?.StringCellValue ?? string.Empty,
                                    //Alimento = curRow.GetCell(1)?.StringCellValue + $"({q-4})",
                                    Prepare = curRow.GetCell(3)?.StringCellValue ?? string.Empty,
                                    FoodName = curRow.GetCell(1)?.StringCellValue + " " + preparo,
                                    //Carboidrato = curRow.GetCell(7)?.ToString() ?? string.Empty,
                                    Carb = double.Parse(carbo),

                                    Kcal = double.Parse(kcal),
                                    Protein = double.Parse(proteina),
                                    Fat = double.Parse(lipidio),
                                    Fiber = double.Parse(fibra)
                                };

                            cardapio.Add(alimento);


                        }
                    }
                }

            }
        }
        catch (Exception ex)
        {
            // Registre ou lide com a exceção adequadamente
            throw ex;
        }
        var novoAlimentoLista = new List<Food>();
        foreach (var alimento in cardapio)
        {
            novoAlimentoLista.Add(alimento);
        }
        return novoAlimentoLista;
    }

    static double TentaConverterParaDouble(string texto, CultureInfo[] culturas)
    {
        foreach (var cultura in culturas)
        {
            if (double.TryParse(texto, NumberStyles.Any, cultura, out double resultado))
            {
                return resultado;
            }
        }

        // Se não foi possível converter com nenhuma cultura, você pode lidar com isso de alguma forma
        throw new ArgumentException("Não foi possível converter a string para double.");
    }

    string AlteraString(string s)
    {
        if (s == "-")
        {
            s = "0";

            return s;
        }

        return s;
    }

   
}
